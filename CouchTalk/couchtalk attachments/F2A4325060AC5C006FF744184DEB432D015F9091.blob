(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*
 * coax
 * https://github.com/jchris/coax
 *
 * Copyright (c) 2013 Chris Anderson
 * Licensed under the Apache license.
 */
var pax = require("pax"),
  hoax = require("hoax");

var coaxPax = pax();

coaxPax.extend("getQuery", function(params) {
  params = JSON.parse(JSON.stringify(params));
  var key, keys = ["key", "startkey", "endkey", "start_key", "end_key"];
  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    if (params[key]) {
      params[key] = JSON.stringify(params[key]);
    }
  }
  return params;
});

var Coax = module.exports = hoax.makeHoax(coaxPax());

Coax.extend("changes", function(opts, cb) {
  if (typeof opts === "function") {
    cb = opts;
    opts = {};
  }
  var self = this;
  opts = opts || {};


  if (opts.feed == "continuous") {
    var listener = self(["_changes", opts], function(err, ok) {
      if (err && err.code == "ETIMEDOUT") {
        return self.changes(opts, cb); // TODO retry limit?
      } else if (err) {
        return cb(err);
      }
    });
    listener.on("data", function(data){
      var sep = "\n";

      // re-emit chunked json data
      eom = data.toString().indexOf(sep)
      msg = data.toString().substring(0, eom)
      remaining = data.toString().substring(eom + 1, data.length)
      if (remaining.length > 0){
        // console.log(data.toString())
        listener.emit("data", remaining)
      }

      var json = JSON.parse(msg);
      cb(false, json)
    })
    return listener;
  } else {
    opts.feed = "longpoll";
    // opts.since = opts.since || 0;
    // console.log("change opts "+JSON.stringify(opts));
    return self(["_changes", opts], function(err, ok) {
      if (err && err.code == "ETIMEDOUT") {
        return self.changes(opts, cb); // TODO retry limit?
      } else if (err) {
        return cb(err);
      }
      // console.log("changes", ok)
      ok.results.forEach(function(row){
        cb(null, row);
      });
      opts.since = ok.last_seq;
      self.changes(opts, cb);
    });
  }
});

Coax.extend("forceSave", function(doc, cb) {
  var api = this(doc._id);
  // console.log("forceSave "+api.pax);
  api.get(function(err, old) {
    if (err && err.error !== "not_found") {
      return cb(err);
    }
    if (!err) {
      doc._rev = old._rev;
    }
    // console.log("forceSave put", api.pax, doc._rev)
    api.put(doc, cb);
  });
});


Coax.extend("channels", function(channels, opts) {
  var self = this;
  var opts = opts || {};

  opts.filter = "sync_gateway/bychannel";
  opts.feed = "continuous"
  opts.channels = channels.join(',')

  // console.log(self.pax.toString())
  var x = function(){};
  x.request = true;
  var changes = self(['_changes', opts], x);
  changes.on("data", function(data) {
    var json;
    try{
      var json = JSON.parse(data.toString())
    }catch(e){
      console.log("not json", data.toString())
    }
    if (json) {
      changes.emit("json", json)
    }
  })
  return changes;
});

},{"hoax":2,"pax":5}],2:[function(require,module,exports){
var core = require("./hoax-core"),
  request = require("browser-request");

request.log.debug = function() {};

module.exports = core(request);

},{"./hoax-core":3,"browser-request":4}],3:[function(require,module,exports){
/*
 * hoax
 * https://github.com/jchris/hoax
 *
 * Copyright (c) 2013 Chris Anderson
 * Licensed under the Apache license.
 */

module.exports = function(request) {
  var pax = require("pax");

  function makeHoaxCallback(cb, verb) {
    return function(err, res, body){
      // console.log("hoax cb", verb||"get", err, res.statusCode, body);
      if (err && err !== "error") {
        cb(err, res, body);
      } else {
        if (res.statusCode >= 400 || err === "error") {
          cb(body || res.statusCode, res);
        } else {
          cb(null, body);
        }
      }
    };
  }

  function processArguments(myPax, urlOrOpts, data, cb, verb) {
    var opts = {}, newPax = myPax;
    if (typeof urlOrOpts === 'function') {
      cb = urlOrOpts;
      data = null;
      urlOrOpts = null;
    } else {
      if (urlOrOpts.uri || urlOrOpts.url) {
        newPax = myPax(urlOrOpts.uri || urlOrOpts.url);
      } else {
        if (typeof data === 'function') {
          // we have only 2 args
          // the first is data if it is not an array
          // and the verb is put or post
          cb = data;
          data = null;
          if ((verb === "put" || verb === "post") &&
            (typeof urlOrOpts !== "string" &&
              Object.prototype.toString.call(urlOrOpts) !== '[object Array]')) {
              data = urlOrOpts;
          } else {
            newPax = myPax(urlOrOpts);
          }
        } else {
          newPax = myPax(urlOrOpts);
        }
      }
    }
    opts.headers = {'content-type': 'application/json'};
    opts.json = true;
    opts.uri = newPax.toString();
    if (data) {
      opts.body = JSON.stringify(data);
    }
    return [opts, cb, newPax];
  }

  function extenderizer(oldHoax) {
    return function(name, fun) {
      this.methods = this.methods || {};
      this.methods[name] = fun;
      this[name] = fun;
    };
  }

  function addExtensions(newHoax, oldHoax) {
    if (oldHoax && oldHoax.methods) {
      var k;
      for (k in oldHoax.methods) {
        newHoax[k] = oldHoax.methods[k];
      }
    }
  }

  function makeHoax(myPax, verb, oldHoax) {
    var newHoax = function(opts, data, xcb) {
      var args = processArguments(myPax, opts, data, xcb, verb),
        reqOpts = args[0], // includes uri, body
        cb = args[1],
        newPax = args[2];
      if (cb) {
        // console.log(["hoax", verb||"get", reqOpts]);
        if (verb) {
          if (verb == "del") {
            reqOpts.method = "DELETE";
          } else {
            reqOpts.method = verb.toUpperCase();
          }
          return request(reqOpts, makeHoaxCallback(cb, verb));
        } else {
          return request(reqOpts, makeHoaxCallback(cb));
        }
      } else {
        // console.log("new hoax", newPax);
        return makeHoax(newPax, verb, newHoax);
      }
    };
    if (!verb) {
      "get put post head del".split(" ").forEach(function(v){
        newHoax[v] = makeHoax(myPax, v, newHoax);
      });
    }
    addExtensions(newHoax, oldHoax);
    // should this be extenderizer(newHoax) ?
    newHoax.extend = extenderizer(oldHoax);
    newHoax.pax = myPax; // deprecated
    newHoax.url = myPax;
    return newHoax;
  }

  var Hoax = makeHoax(pax());
  Hoax.makeHoax = makeHoax;

  return Hoax;
};

},{"pax":5}],4:[function(require,module,exports){
// Browser Request
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

var XHR = XMLHttpRequest
if (!XHR) throw new Error('missing XMLHttpRequest')

module.exports = request
request.log = {
  'trace': noop, 'debug': noop, 'info': noop, 'warn': noop, 'error': noop
}

var DEFAULT_TIMEOUT = 3 * 60 * 1000 // 3 minutes

//
// request
//

function request(options, callback) {
  // The entry-point to the API: prep the options object and pass the real work to run_xhr.
  if(typeof callback !== 'function')
    throw new Error('Bad callback given: ' + callback)

  if(!options)
    throw new Error('No options given')

  var options_onResponse = options.onResponse; // Save this for later.

  if(typeof options === 'string')
    options = {'uri':options};
  else
    options = JSON.parse(JSON.stringify(options)); // Use a duplicate for mutating.

  options.onResponse = options_onResponse // And put it back.

  if (options.verbose) request.log = getLogger();

  if(options.url) {
    options.uri = options.url;
    delete options.url;
  }

  if(!options.uri && options.uri !== "")
    throw new Error("options.uri is a required argument");

  if(typeof options.uri != "string")
    throw new Error("options.uri must be a string");

  var unsupported_options = ['proxy', '_redirectsFollowed', 'maxRedirects', 'followRedirect']
  for (var i = 0; i < unsupported_options.length; i++)
    if(options[ unsupported_options[i] ])
      throw new Error("options." + unsupported_options[i] + " is not supported")

  options.callback = callback
  options.method = options.method || 'GET';
  options.headers = options.headers || {};
  options.body    = options.body || null
  options.timeout = options.timeout || request.DEFAULT_TIMEOUT

  if(options.headers.host)
    throw new Error("Options.headers.host is not supported");

  if(options.json) {
    options.headers.accept = options.headers.accept || 'application/json'
    if(options.method !== 'GET')
      options.headers['content-type'] = 'application/json'

    if(typeof options.json !== 'boolean')
      options.body = JSON.stringify(options.json)
    else if(typeof options.body !== 'string')
      options.body = JSON.stringify(options.body)
  }

  // If onResponse is boolean true, call back immediately when the response is known,
  // not when the full request is complete.
  options.onResponse = options.onResponse || noop
  if(options.onResponse === true) {
    options.onResponse = callback
    options.callback = noop
  }

  // XXX Browsers do not like this.
  //if(options.body)
  //  options.headers['content-length'] = options.body.length;

  // HTTP basic authentication
  if(!options.headers.authorization && options.auth)
    options.headers.authorization = 'Basic ' + b64_enc(options.auth.username + ':' + options.auth.password);

  return run_xhr(options)
}

var req_seq = 0
function run_xhr(options) {
  var xhr = new XHR
    , timed_out = false
    , is_cors = is_crossDomain(options.uri)
    , supports_cors = ('withCredentials' in xhr)

  req_seq += 1
  xhr.seq_id = req_seq
  xhr.id = req_seq + ': ' + options.method + ' ' + options.uri
  xhr._id = xhr.id // I know I will type "_id" from habit all the time.

  if(is_cors && !supports_cors) {
    var cors_err = new Error('Browser does not support cross-origin request: ' + options.uri)
    cors_err.cors = 'unsupported'
    return options.callback(cors_err, xhr)
  }

  xhr.timeoutTimer = setTimeout(too_late, options.timeout)
  function too_late() {
    timed_out = true
    var er = new Error('ETIMEDOUT')
    er.code = 'ETIMEDOUT'
    er.duration = options.timeout

    request.log.error('Timeout', { 'id':xhr._id, 'milliseconds':options.timeout })
    return options.callback(er, xhr)
  }

  // Some states can be skipped over, so remember what is still incomplete.
  var did = {'response':false, 'loading':false, 'end':false}

  xhr.onreadystatechange = on_state_change
  xhr.open(options.method, options.uri, true) // asynchronous
  if(is_cors)
    xhr.withCredentials = !! options.withCredentials
  xhr.send(options.body)
  return xhr

  function on_state_change(event) {
    if(timed_out)
      return request.log.debug('Ignoring timed out state change', {'state':xhr.readyState, 'id':xhr.id})

    request.log.debug('State change', {'state':xhr.readyState, 'id':xhr.id, 'timed_out':timed_out})

    if(xhr.readyState === XHR.OPENED) {
      request.log.debug('Request started', {'id':xhr.id})
      for (var key in options.headers)
        xhr.setRequestHeader(key, options.headers[key])
    }

    else if(xhr.readyState === XHR.HEADERS_RECEIVED)
      on_response()

    else if(xhr.readyState === XHR.LOADING) {
      on_response()
      on_loading()
    }

    else if(xhr.readyState === XHR.DONE) {
      on_response()
      on_loading()
      on_end()
    }
  }

  function on_response() {
    if(did.response)
      return

    did.response = true
    request.log.debug('Got response', {'id':xhr.id, 'status':xhr.status})
    clearTimeout(xhr.timeoutTimer)
    xhr.statusCode = xhr.status // Node request compatibility

    // Detect failed CORS requests.
    if(is_cors && xhr.statusCode == 0) {
      var cors_err = new Error('CORS request rejected: ' + options.uri)
      cors_err.cors = 'rejected'

      // Do not process this request further.
      did.loading = true
      did.end = true

      return options.callback(cors_err, xhr)
    }

    options.onResponse(null, xhr)
  }

  function on_loading() {
    if(did.loading)
      return

    did.loading = true
    request.log.debug('Response body loading', {'id':xhr.id})
    // TODO: Maybe simulate "data" events by watching xhr.responseText
  }

  function on_end() {
    if(did.end)
      return

    did.end = true
    request.log.debug('Request done', {'id':xhr.id})

    xhr.body = xhr.responseText
    if(options.json) {
      try        { xhr.body = JSON.parse(xhr.responseText) }
      catch (er) { return options.callback(er, xhr)        }
    }

    options.callback(null, xhr, xhr.body)
  }

} // request

request.withCredentials = false;
request.DEFAULT_TIMEOUT = DEFAULT_TIMEOUT;

//
// defaults
//

request.defaults = function(options, requester) {
  var def = function (method) {
    var d = function (params, callback) {
      if(typeof params === 'string')
        params = {'uri': params};
      else {
        params = JSON.parse(JSON.stringify(params));
      }
      for (var i in options) {
        if (params[i] === undefined) params[i] = options[i]
      }
      return method(params, callback)
    }
    return d
  }
  var de = def(request)
  de.get = def(request.get)
  de.post = def(request.post)
  de.put = def(request.put)
  de.head = def(request.head)
  return de
}

//
// HTTP method shortcuts
//

var shortcuts = [ 'get', 'put', 'post', 'head' ];
shortcuts.forEach(function(shortcut) {
  var method = shortcut.toUpperCase();
  var func   = shortcut.toLowerCase();

  request[func] = function(opts) {
    if(typeof opts === 'string')
      opts = {'method':method, 'uri':opts};
    else {
      opts = JSON.parse(JSON.stringify(opts));
      opts.method = method;
    }

    var args = [opts].concat(Array.prototype.slice.apply(arguments, [1]));
    return request.apply(this, args);
  }
})

//
// CouchDB shortcut
//

request.couch = function(options, callback) {
  if(typeof options === 'string')
    options = {'uri':options}

  // Just use the request API to do JSON.
  options.json = true
  if(options.body)
    options.json = options.body
  delete options.body

  callback = callback || noop

  var xhr = request(options, couch_handler)
  return xhr

  function couch_handler(er, resp, body) {
    if(er)
      return callback(er, resp, body)

    if((resp.statusCode < 200 || resp.statusCode > 299) && body.error) {
      // The body is a Couch JSON object indicating the error.
      er = new Error('CouchDB error: ' + (body.error.reason || body.error.error))
      for (var key in body)
        er[key] = body[key]
      return callback(er, resp, body);
    }

    return callback(er, resp, body);
  }
}

//
// Utility
//

function noop() {}

function getLogger() {
  var logger = {}
    , levels = ['trace', 'debug', 'info', 'warn', 'error']
    , level, i

  for(i = 0; i < levels.length; i++) {
    level = levels[i]

    logger[level] = noop
    if(typeof console !== 'undefined' && console && console[level])
      logger[level] = formatted(console, level)
  }

  return logger
}

function formatted(obj, method) {
  return formatted_logger

  function formatted_logger(str, context) {
    if(typeof context === 'object')
      str += ' ' + JSON.stringify(context)

    return obj[method].call(obj, str)
  }
}

// Return whether a URL is a cross-domain request.
function is_crossDomain(url) {
  var rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/

  // jQuery #8138, IE may throw an exception when accessing
  // a field from window.location if document.domain has been set
  var ajaxLocation
  try { ajaxLocation = location.href }
  catch (e) {
    // Use the href attribute of an A element since IE will modify it given document.location
    ajaxLocation = document.createElement( "a" );
    ajaxLocation.href = "";
    ajaxLocation = ajaxLocation.href;
  }

  var ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || []
    , parts = rurl.exec(url.toLowerCase() )

  var result = !!(
    parts &&
    (  parts[1] != ajaxLocParts[1]
    || parts[2] != ajaxLocParts[2]
    || (parts[3] || (parts[1] === "http:" ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443))
    )
  )

  //console.debug('is_crossDomain('+url+') -> ' + result)
  return result
}

// MIT License from http://phpjs.org/functions/base64_encode:358
function b64_enc (data) {
    // Encodes string using MIME base64 algorithm
    var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, enc="", tmp_arr = [];

    if (!data) {
        return data;
    }

    // assume utf8 data
    // data = this.utf8_encode(data+'');

    do { // pack three octets into four hexets
        o1 = data.charCodeAt(i++);
        o2 = data.charCodeAt(i++);
        o3 = data.charCodeAt(i++);

        bits = o1<<16 | o2<<8 | o3;

        h1 = bits>>18 & 0x3f;
        h2 = bits>>12 & 0x3f;
        h3 = bits>>6 & 0x3f;
        h4 = bits & 0x3f;

        // use hexets to index into b64, and append result to encoded string
        tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
    } while (i < data.length);

    enc = tmp_arr.join('');

    switch (data.length % 3) {
        case 1:
            enc = enc.slice(0, -2) + '==';
        break;
        case 2:
            enc = enc.slice(0, -1) + '=';
        break;
    }

    return enc;
}

},{}],5:[function(require,module,exports){
/*
 * pax
 * https://github.com/jchris/pax
 *
 * Copyright (c) 2013 Chris Anderson
 * Licensed under the APL license.
 */

function objToQuery(q) {
  var k, ks = Object.keys(q), v, query = [];
  for (k = 0; k < ks.length; k++) {
    v = q[ks[k]];
    query.push(encodeURIComponent(ks[k])+'='+encodeURIComponent(v.toString()));
  }
  return query.join('&');
}

// if there is an object in the new path,
// pluck it out and put it on the pax instance;

function processPath(path) {
  var query;
  if (path && path.pop && path.length) {
    if (typeof path[path.length-1] === 'object') {
      path.query = path.pop();
    }
    return path;
  } else if (typeof path === "object") { // options
    var empty = [];
    empty.query = path;
    return empty;
  } else if (path) { // string
    return [path];
  } else {
    return [];
  }
}

function merge(target, source) {
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      target[key] = source[key];
    }
  }
  return target;
}

function mergePaths(path, newPath) {
  var k, merged = path.concat(newPath);
  merged.methods = {};
  if (path.query)  {
    merged.query = merge({}, path.query);
  }
  if (newPath.query) {
    merged.query = merge(merged.query || {}, newPath.query);
  }
  if (typeof path.getQuery !== 'undefined') {
    merged.getQuery = path.getQuery;
  }
  for (k in path.methods) {
    merged.methods[k] = path.methods[k];
  }

  // if (typeof newPath.getQuery !== 'undefined') {
  //   merged.getQuery = newPath.getQuery;
  // }
  return merged;
}

function makeToString(path) {
  var first = true,
  encoded = path.map(function(p) {
    if (first) {
      first = false;
      if (/^http/.test(p)) {
        if (/\/$/.test(p)) {
          return p.substring(0,p.length-1);
        } else {
          return p;
        }
      }
    }
    return encodeURIComponent(p);
  });

  return function() {
    if (path.query) {
      var qobj;
      if (path.getQuery || this.getQuery) {
        qobj = (path.getQuery || this.getQuery)(path.query);
      } else {
        qobj = path.query;
      }
      return encoded.join('/') + '?' + objToQuery(qobj);
    } else {
      return encoded.join('/');
    }
  };
}

function extenderizer(path) {
  path.methods = path.methods || {};
  return function(name, fun) {
    path.methods[name] = fun;
    this[name] = fun;
  };
}

function addExtensions(pax, path) {
  var k;
  for (k in path.methods) {
    pax[k] = path.methods[k];
  }
}

var growPax;

function makeNextPathFun(path) {
  var nextPax = function(nextPath) {
    // console.log("nextPax",nextPax);
    if (typeof nextPax.getQuery !== 'undefined') {path.getQuery = nextPax.getQuery;}
    if (arguments.length > 1) {
      return growPax(path, [].map.call(arguments,function(arg){return arg;}));
    } else {
      return growPax(path, nextPath);
    }
  };
  addExtensions(nextPax, path);
  nextPax.extend = extenderizer(path);
  // console.log(["pax", path, path.query]);
  nextPax.toString = makeToString(path);
  // console.log(["paxs", nextPax.toString()]);
  return nextPax;
}

function growPax(path, newPath) {
  newPath = processPath(newPath);
  path = mergePaths(path, newPath);
  return makeNextPathFun(path);
}

module.exports = makeNextPathFun([]);


},{}],6:[function(require,module,exports){
// getUserMedia helper by @HenrikJoreteg
var func = (navigator.getUserMedia ||
            navigator.webkitGetUserMedia ||
            navigator.mozGetUserMedia ||
            navigator.msGetUserMedia);


module.exports = function (constraints, cb) {
    var options;
    var haveOpts = arguments.length === 2;
    var defaultOpts = {video: true, audio: true};
    var error;
    var denied = 'PERMISSION_DENIED';
    var notSatified = 'CONSTRAINT_NOT_SATISFIED';

    // make constraints optional
    if (!haveOpts) {
        cb = constraints;
        constraints = defaultOpts;
    }

    // treat lack of browser support like an error
    if (!func) {
        // throw proper error per spec
        error = new Error('NavigatorUserMediaError');
        error.name = 'NOT_SUPPORTED_ERROR';
        return cb(error);
    }

    func.call(navigator, constraints, function (stream) {
        cb(null, stream);
    }, function (err) {
        var error;
        // coerce into an error object since FF gives us a string
        // there are only two valid names according to the spec
        // we coerce all non-denied to "constraint not satisfied".
        if (typeof err === 'string') {
            error = new Error('NavigatorUserMediaError');
            if (err === denied) {
                error.name = denied;
            } else {
                error.name = notSatified;
            }
        } else {
            // if we get an error object make sure '.name' property is set
            // according to spec: http://dev.w3.org/2011/webrtc/editor/getusermedia.html#navigatorusermediaerror-and-navigatorusermediaerrorcallback
            error = err;
            if (!error.name) {
                // this is likely chrome which
                // sets a property called "ERROR_DENIED" on the error object
                // if so we make sure to set a name
                if (error[denied]) {
                    err.name = denied;
                } else {
                    err.name = notSatified;
                }
            }
        }

        cb(error);
    });
};

},{}],7:[function(require,module,exports){
/* global $ */
var CouchTalk = require("../jsx/app.jsx"),
    coax = CouchTalk._coaxModule;

$(function () {
  var room = location.hash.slice(1),
      db_url = location.origin + '/' + location.pathname.split('/')[1];

  window.onhashchange = function(){
    location.reload()
  }

  if (room) {
    React.renderComponent(
      CouchTalk.App({
        db : (window.coaxDb = coax(db_url)),
        room : room,
        client :  "s:"+Math.random().toString(20)
      }),
      document.getElementById('container')
    );
  } else {
    React.renderComponent(CouchTalk.Index({}),
      document.getElementById('container'))
  }
})

},{"../jsx/app.jsx":9}],8:[function(require,module,exports){
/* global Recorder */
/* global AudioContext */

module.exports = {
  connectAudio : connectAudio
}

function connectAudio(cb) {
  window.AudioContext = window.AudioContext || window.webkitAudioContext;
  navigator.getUserMedia  = navigator.getUserMedia ||
                            navigator.webkitGetUserMedia ||
                            navigator.mozGetUserMedia ||
                            navigator.msGetUserMedia;
  window.URL = window.URL || window.webkitURL;

  if (!navigator.getUserMedia) {
    cb(new Error("navigator.getUserMedia missing"))
  } else {
    try {
      var audio_context = new AudioContext();
    } catch (e) {
      cb(new Error("AudioContext missing"))
    }
    navigator.getUserMedia({audio: true, video: true}, function(stream){
      var input = audio_context.createMediaStreamSource(stream),
        recorder = new Recorder(input, {workerPath: "recorderWorker.js"});
      recorder.stream = stream;
      cb(false, recorder)
    }, function(e) {
      cb(new Error('No live audio input: ' + e));
    });
  }
}

},{}],9:[function(require,module,exports){
/**
 * @jsx React.DOM
 */
 /* global $ */
 /* global io */
 

var
  connectAudio = require("../js/recorder").connectAudio,
  getUserMedia = require("getusermedia");

exports._coaxModule = require("coax");      // HACK: for whatever reason build process doesn't let main.js require 'coax' directly…

var ITEM_TYPE = 'com.couchbase.labs.couchtalk.message-item';

exports.Index = React.createClass({
  getInitialState : function(){
    return {goRoom : Math.random().toString(26).substr(2)}
  },
  onSubmit : function(e){
    e.preventDefault();
    document.location.hash = this.state.goRoom;
    location.reload();
  },
  handleChange : function(e){
    this.setState({goRoom: e.target.value});
  },
  render : function(){
    return (React.DOM.div( {id:"splash"}, 
          React.DOM.h2(null, "Welcome to CouchTalk"),
          React.DOM.p(null, "Enter the name of a room to join, or enter \"howto\" for instructions:"),
          React.DOM.form( {onSubmit:this.onSubmit}, 
            React.DOM.input( {type:"text", size:40,
            value:this.state.goRoom,
            onChange:this.handleChange}),
            React.DOM.button( {type:"submit"}, "Join")
          ),
          React.DOM.img( {src:"splash.jpg"})
        ))
  }
});

module.exports.App = React.createClass({
  propTypes : {
    db: React.PropTypes.func.isRequired,
    room : React.PropTypes.string.isRequired,
    client : React.PropTypes.string.isRequired,
    snapshotInterval: React.PropTypes.number
  },
  getDefaultProps : function() {
    return {
      dbgLocalShortcut : false, // if enabled, images/audio can get broken
      dbgDbSupportsSinceNow : false,
      snapshotInterval : 250    // init as `Infinity` to disable
    };
  },
  getInitialState : function () {
    return {
      recording : false,
      autoplay : $.fn.cookie('autoplay') !== "0",
      messages : $.extend([], {_byKey:Object.create(null)}),
      loadedAll : false
    };
  },
  componentWillMount : function () {
    if (this.props.dbgDbSupportsSinceNow) this.monitorChanges();
    else this.props.db.get(function (e,d) {
      if (e) throw e;
      this.monitorChanges(d.update_seq);
    }.bind(this));
  },
  componentDidMount : function (rootNode) {
    connectAudio(function(e, webcam) {
      if (e) return reloadError(e);
      this.setupSpacebarRecording();
      this.setState({webcam : webcam, webcamStreamURL : window.URL.createObjectURL(webcam.stream)});
    }.bind(this));
  },
  
  changesOpts : function (more) {
    function expando(prefix, string) {
      // WORKAROUND: https://github.com/couchbase/couchbase-lite-ios/issues/321
      var params = {};
      params[prefix] = string;
      params[prefix+'LEN'] = string.length;
      Array.prototype.forEach.call(string, function (s,i) {
        params[''+prefix+i] = s.charCodeAt(0);
      });
      return params;
    }
    return $.extend({
      include_docs: true,
      filter : 'app/roomItems',
    }, expando('room', this.props.room), more || {});
  },
  handleChange : function (d) {
    if (d.doc.type !== ITEM_TYPE || d.doc.room !== this.props.room) return;
    else if (this.props.dbgLocalShortcut && d.doc.client === this.props.client) return;
    else this.integrateItemIntoMessages(d.doc);
  },
  monitorChanges : function (seq) {
    if (!arguments.length) seq = 'now';
    this.props.db.changes(this.changesOpts({since:seq}), function (e,d) {
      if (e) throw e;   // TODO: what?
      this.handleChange(d);
    }.bind(this));
  },
  loadAllMessages : function () {
    var emptyMessages = $.extend([], {_byKey:Object.create(null)});     // HACK: this maintains order…
    this.setState({loadedAll : true, messages : emptyMessages});
    
    // NOTE: we will have had some of these, but should be harmless to re-integrate…
    this.props.db('_changes')(this.changesOpts()).get(function (e,d) {
      if (e) throw e;
      d.results.forEach(this.handleChange, this);
    }.bind(this));
  },
  
  integrateItemIntoMessages : function (doc) {
    var messages = this.state.messages,
        message = messages._byKey[doc.message];
    if (!message) {
      message = {
        key: doc.message,
        snaps: [],
        audio: null
      };
      if (doc.client === this.props.client) {
        // when recording, bump autoplay cursor up past our own message
        this.state.messages.forEach(function (msg) {
          msg.playing = false;
          msg.lastPlayed = false;
        });
        message.lastPlayed = true;
      }
      messages.push(messages._byKey[message.key] = message);
    }
    
    if ('snapshotNumber' in doc) {
      if (doc.snapshotNumber === 'join') {
        message.justJoining = true;
        if (message.lastPlayed) {
          // HACK: this triggers a scroll to the user's own joining snapshot!
          message.lastPlayed = false;
          message.playing = true;
        }
        doc.snapshotNumber = 0;
      }
      message.snaps[doc.snapshotNumber] = [this.props.db.url, doc._id, 'snapshot'].join('/');
    } else {    // assume it's the recording instead
      message.audio = [this.props.db.url, doc._id, 'audio'].join('/');
    }
    
    this.setState({messages : messages});
  },
  
  setupSpacebarRecording : function () {
    var spacebar = ' '.charCodeAt(0),
        session = null;
    window.onkeydown = function (evt) {
      if (evt.repeat) return;
      var key = evt.keyCode || evt.which;
      if (key === spacebar) {
        evt.preventDefault();
        session = this.startRecording();
      }
    }.bind(this);
    window.onkeyup = function (evt) {
      var key = evt.keyCode || evt.which;
      if (key === spacebar) {
        this.stopRecording(session);
      }
    }.bind(this);
  },
  
  startRecording : function () {
    if (this.state.recording) throw Error("Recording started while already in progress!");
    
    var session = {},
        msgId = "msg:"+Math.random().toString(20),
        picNo = 0;
    session.messageId = msgId;
    session.snapshotTimer = setInterval(function () {
      this.saveSnapshot(msgId, picNo++)
    }.bind(this), this.props.snapshotInterval);
    this.saveSnapshot(msgId, picNo++);
    this.state.webcam.record();
    this.setState({recording : true});
    return session;
  },
  stopRecording : function (session) {
    if (!this.state.recording) throw Error("Recording stopped while not in progress!");
    
    clearInterval(session.snapshotTimer);
    var recorder = this.state.webcam;
    recorder.stop();
    recorder.exportMonoWAV(this.saveAudio.bind(this, session.messageId));
    recorder.clear();
    this.setState({recording : false});
  },
  
  saveItemToRoom : function (fields, atts) {    // atts [optional] uses keys for name, expects data url in values
    var item = $.extend({
      _id : "msg:"+Math.random().toString(20),    // if we don't assign, short circuited local display gets into trouble
      type : ITEM_TYPE,
      room : this.props.room,
      client : this.props.client,
      timestamp : new Date().toISOString()
    }, fields);
    if (atts) item._attachments = Object.keys(atts).reduce(function (obj, name) {
      var urlParts = atts[name].split(/[,;:]/);
      obj[name] = {
        content_type : urlParts[1],
        data : urlParts[3]
      };
      return obj;
    }, item._attachments || {});
    this.props.db.post(item, function (e) {
      if (e) throw e;
    });
    // also display locally right away [disabled for reliable snapshot URLs]
    if (this.props.dbgLocalShortcut) this.integrateItemIntoMessages(item);
  },
  
  saveSnapshot : function (msgId, picNo) {
    var video = this.refs.localPreview.getDOMNode(),
        ctx = this.refs.snapshotContext.getDOMNode().getContext('2d');
    ctx.drawImage(video, 0,0, ctx.canvas.width,ctx.canvas.height);
    
    var snapshot = ctx.canvas.toDataURL("image/jpeg");
    this.saveItemToRoom({
      message : msgId,
      snapshotNumber : picNo
    }, {snapshot : snapshot});
  },
  
  saveAudio : function (msgId, wav) {
    var reader = new FileReader();
    reader.readAsDataURL(wav);
    reader.onerror = function () {
      throw reader.error;
    };
    reader.onloadend = function () {
      this.saveItemToRoom({
        message : msgId
      }, {audio : reader.result});
    }.bind(this);
  },
  
  manualPlayback : function (msgKey) {
    var messages = this.state.messages;
    messages.forEach(function (msg) {
      msg.playing = (msg.key === msgKey);
      msg.lastPlayed = false;
    });
    this.setState({messages : messages});
  },
  
  playbackFinished : function (msgKey) {
    var messages = this.state.messages;
    messages.forEach(function (msg) {
      msg.playing = false;
      msg.lastPlayed = (msg.key === msgKey);
    });
    this.setState({messages : messages});
  },
  
  autoplayChanged : function (evt) {
    var autoplay = evt.target.checked;
    $.fn.cookie('autoplay', (autoplay) ? '1' : '0', {path : "/"});
    this.setState({autoplay : autoplay});
  },
  
  componentWillUpdate : function (nextProps, nextState) {
    // BIG HACK: any time messages change we want to also sneak in any autoplay changes
    if (!nextState.autoplay) return;
    var messages = nextState.messages,
        prevPlayed = null;
    messages.forEach(function (msg) {
      if (msg.lastPlayed) prevPlayed = msg;
      else if (prevPlayed) {
        if (msg.audio || msg.justJoining) {
          prevPlayed.lastPlayed = false;
          msg.playing = true;
        }
        prevPlayed = null;
      }
    });
  },
  
  render : function() {
window.dbgMessages = this.state.messages;
    var url = window.location;
    var recording = (this.state.recording) ?
      React.DOM.span( {className:"recording"}, "Recording.") :
      React.DOM.span(null);
    var oldestKnownMessage = this.state.messages[0];
    document.title = this.props.room + " - CouchTalk"
    var beg = (this.state.webcam) ? "" : React.DOM.h2(null, "Smile! ⇑");
    return (
      React.DOM.div( {className:"room"}, 
      React.DOM.header(null, 
        beg,
        React.DOM.h4(null, "Push to Talk with ", React.DOM.a( {href:"http://mobile.couchbase.com/"}, "Couchbase Mobile")),
        React.DOM.p(null, React.DOM.strong(null, "Hold down the space bar"), " while you are talking to record. ",
          React.DOM.em(null, "All messages are public. " )
        ),
        React.DOM.video( {ref:"localPreview", autoPlay:true, muted:true, width:160, height:120, className:(this.state.recording) ? 'recording' : '', src:this.state.webcamStreamURL}),
        React.DOM.canvas( {ref:"snapshotContext", style:{display : "none"}, width:320, height:240}),
        React.DOM.label( {className:"autoplay"}, React.DOM.input( {type:"checkbox", onChange:this.autoplayChanged, checked:this.state.autoplay}), " Auto-play"), recording,
        React.DOM.br(null),
        
        !this.state.loadedAll && React.DOM.p(null, React.DOM.a( {onClick:this.loadAllMessages}, "Load all previous messages.")),
        
        React.DOM.a( {href:"#"}, "Go to a new room."),
                
        React.DOM.aside(null, React.DOM.strong(null, "1997 called: " ), " it wants you to know CouchTalk ", React.DOM.a( {href:"http://caniuse.com/#feat=stream"}, "requires " ),
          React.DOM.a( {href:"http://www.mozilla.org/en-US/firefox/new/"}, "Firefox"), " or ", React.DOM.a( {href:"https://www.google.com/intl/en/chrome/browser/"}, "Chrome"),".")
      ),
      React.DOM.ul( {className:"messages"}, 
        this.state.messages.map(function (m) {
          return Message( {message:m, key:m.key, onPlaybackRequested:this.manualPlayback, onPlaybackDone:this.playbackFinished, ref:"testing"})
        }, this)
      )
      )
      );
  },
  
  componentDidUpdate : function () {
    // HACK: send initial snapshot once webcam is connected
    var video = this.refs.localPreview.getDOMNode();
    if (video.src && !this._tookSnapshot) {
      this._tookSnapshot = true;
      setTimeout(function () {
        this.saveSnapshot("hello:"+Math.random().toString(20), 'join');
      }.bind(this), 250);
    }
  }
});

var Message = React.createClass({displayName: 'Message',
  propTypes : {
    message: React.PropTypes.object.isRequired,
    onPlaybackRequested: React.PropTypes.func,
    onPlaybackDone: React.PropTypes.func
  },
  getInitialState : function () {
    return {
      percentProgress : 0
    };
  },
  
  requestPlayback : function () {
    if (this.props.onPlaybackRequested) this.props.onPlaybackRequested(this.props.message.key);
  },
  notifyFinished : function () {
    if (this.props.onPlaybackDone) this.props.onPlaybackDone(this.props.message.key);
  },
  
  componentDidMount : function () {
    var audio = this.refs.audio.getDOMNode();
    audio.ontimeupdate = function () {
      this.setState({percentProgress: audio.currentTime / audio.duration});
    }.bind(this);
    audio.onended = this.notifyFinished;
    audio.onerror = function () {
      //console.warn("AUDIO ERROR!", audio.error, audio);
      if (audio.error.code === window.MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED && audio.src.indexOf('?') === -1) {
        // WORKAROUND: https://github.com/couchbase/couchbase-lite-ios/issues/317
        audio.src += "?nocache="+Math.random();
        audio.oncanplay = function () {
          audio.oncanplay = null;
          //console.log("Worked around audio error by cache busting.");
          this.forceUpdate();
        }.bind(this);
      }
    }.bind(this);
    this.componentDidUpdate();      // otherwise it doesn't get called after initial render
  },
  
  render : function () {
    var message = this.props.message,
        snapIdx = Math.round(this.state.percentProgress * (message.snaps.length - 1)),
        classes = [];
    if (message.justJoining) classes.push('joined');
    else if (!message.audio) classes.push('noAudio');
    if (message.playing) classes.push('playing');
    if (message.lastPlayed) classes.push('played');
    return (React.DOM.li( {key:message.key}, 
        React.DOM.img( {src:message.snaps[snapIdx], className:classes.join(' '), onClick:this.requestPlayback}),
        React.DOM.audio( {preload:"auto", src:message.audio, ref:"audio"})
      ));
  },
  
  componentDidUpdate : function () {
    // we can't use this.refs in render, so must update playback state separately
    var message = this.props.message,
        audio = this.refs.audio.getDOMNode(),
        audioPlaying = !(audio.paused || audio.ended);
    if (message.playing && message.justJoining) {
      audio.parentNode.scrollIntoView();
      this.notifyFinished();
    } else if (message.playing && !audioPlaying) {
      audio.parentNode.scrollIntoView();
      if (audio.currentTime) audio.currentTime = 0;
      audio.play();
    } else if (!message.playing && audioPlaying) {
      audio.pause();
      audio.currentTime = 0;      // go back to first thumbail
    }
  }
});


var RecentRooms = React.createClass({displayName: 'RecentRooms',
  getInitialState : function(){
    return {
      sortedRooms : this.sortedRooms()
    }
  },
  parseRooms : function(){
    var rooms = $.fn.cookie("rooms");
    if (rooms) {
      return JSON.parse(rooms)
    } else {
      return {}
    }
  },
  sortedRooms : function() {
    var rooms = this.parseRooms()
    var sortedRooms = [];
    for (var room in rooms) {
      if (room !== this.props.id)
        sortedRooms.push([room, new Date(rooms[room])])
    }
    if (sortedRooms.length > 0) {
      sortedRooms.sort(function(a, b) {return b[1] - a[1]})
      console.log("sortedRooms", sortedRooms)
      return sortedRooms;
    }
  },
  clearHistory : function(){
    $.fn.cookie("rooms", '{}', {path : "/"})
    this.setState({sortedRooms : this.sortedRooms()})
  },
  componentDidMount : function(){
    if (this.props.id) {
      var rooms = this.parseRooms()
      console.log("parseRooms", rooms)
      rooms[this.props.id] = new Date();
      $.fn.cookie("rooms", JSON.stringify(rooms), {path : "/"})
    }
  },
  render : function(){
    if (this.state.sortedRooms) {
      return React.DOM.aside(null, 
        React.DOM.h4(null, "Recent Rooms ", React.DOM.a( {onClick:this.clearHistory}, "(Clear)")),
        React.DOM.ul(null, 
          this.state.sortedRooms.map(function(room){
            var href = "#"+room[0]
            return React.DOM.li( {key:room[0]}, React.DOM.a( {href:href}, room[0]))
          }, this)
        )
      )
    } else {
      return React.DOM.aside(null)
    }
  },
})

function reloadError(error) {
  if (navigator.getUserMedia) {
    console.error("reload",error);
    setTimeout(function(){
      document.location = location
    },200)
  } else {
    $("h2").html('CouchTalk requires Firefox or Chrome!')
  }
}

function getQueryVariable(variable) {
  var query = window.location.search.substring(1);
  var vars = query.split("&");
  for (var i=0; i < vars.length; i++) {
    var pair = vars[i].split("=");
    if (pair[0] == variable) {
      return pair[1];
    }
  }
}

},{"../js/recorder":8,"coax":1,"getusermedia":6}]},{},[7])
//@ sourceMappingURL=data:application/json;base64,
